#!/usr/bin/env python3
"""
–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –±—ç–∫–µ–Ω–¥ - —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤
"""

import requests
import time
import random
from datetime import datetime

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å Loki
LOKI_URL = "http://localhost:3100/loki/api/v1/push"
APP_NAME = "crypto-app"


class CryptoBackend:
    """–≠–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞"""
    
    def __init__(self):
        self.cryptocurrencies = {
            'BTC': {'price': 65000, 'name': 'Bitcoin'},
            'ETH': {'price': 3500, 'name': 'Ethereum'},
            'SOL': {'price': 150, 'name': 'Solana'},
            'ADA': {'price': 0.45, 'name': 'Cardano'}
        }
        self.users = ['alice', 'bob', 'charlie', 'david', 'eve']
        self.is_running = False
    
    def update_crypto_prices(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏"""
        for symbol, data in self.cryptocurrencies.items():
            # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç -3% –¥–æ +3%
            change_percent = random.uniform(-0.03, 0.03)
            new_price = data['price'] * (1 + change_percent)
            data['price'] = round(new_price, 2)
    
    def simulate_trading_activity(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.update_crypto_prices()
        
        user = random.choice(self.users)
        crypto = random.choice(list(self.cryptocurrencies.keys()))
        amount = round(random.uniform(0.001, 10), 6)
        transaction_type = random.choice(['buy', 'sell'])
        
        # –≠–º—É–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ –≤ 15% —Å–ª—É—á–∞–µ–≤
        is_failed = random.random() < 0.15
        
        price = self.cryptocurrencies[crypto]['price']
        crypto_name = self.cryptocurrencies[crypto]['name']
        
        if not is_failed:
            message = (
                f"‚úì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} "
                f"{transaction_type} {amount} {crypto} ({crypto_name}) "
                f"–ø–æ —Ü–µ–Ω–µ ${price:.2f}"
            )
            self.send_log_to_loki(message, "trading", "INFO")
        else:
            error_reasons = [
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π API –±–∏—Ä–∂–∏",
                "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
            ]
            reason = random.choice(error_reasons)
            message = (
                f"‚úó –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {user} –Ω–µ —Å–º–æ–≥ {transaction_type} "
                f"{amount} {crypto}. –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            self.send_log_to_loki(message, "trading", "ERROR")
    
    def simulate_user_activity(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        user = random.choice(self.users)
        activities = [
            (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É", "INFO"),
            (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –æ–±–Ω–æ–≤–∏–ª –ø—Ä–æ—Ñ–∏–ª—å", "INFO"),
            (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "DEBUG"),
            (f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –¥–ª—è {user}", "WARNING"),
            (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API", "WARNING")
        ]
        
        message, level = random.choice(activities)
        self.send_log_to_loki(message, "user-activity", level)
    
    def simulate_system_events(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        events = [
            ("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "INFO"),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç", "DEBUG"),
            ("–ó–∞–ø—É—â–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "INFO"),
            ("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç–∏", "WARNING"),
            ("–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä", "WARNING"),
            ("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î", "CRITICAL")
        ]
        
        message, level = random.choice(events)
        self.send_log_to_loki(f"üîß –°–∏—Å—Ç–µ–º–∞: {message}", "system", level)
    
    def simulate_validation_events(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        user = random.choice(self.users)
        validations = [
            (f"–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", "INFO"),
            (f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç {user}", "ERROR"),
            (f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è {user}", "DEBUG"),
            (f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {user}", "WARNING")
        ]
        
        message, level = random.choice(validations)
        self.send_log_to_loki(message, "validation", level)
    
    def send_log_to_loki(self, message: str, activity_type: str, level: str = "INFO"):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤ Loki —á–µ—Ä–µ–∑ POST –Ω–∞ /loki/api/v1/push
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞
            activity_type: –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (trading, user-activity, system, validation)
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (INFO, ERROR, DEBUG, WARNING, CRITICAL)
        """
        # Timestamp –≤ –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥–∞—Ö (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Loki)
        timestamp = str(int(time.time() * 1_000_000_000))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload —Å–æ–≥–ª–∞—Å–Ω–æ API Loki
        payload = {
            "streams": [
                {
                    "stream": {
                        "job": APP_NAME,           # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        "level": level,            # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                        "activity": activity_type  # –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    },
                    "values": [
                        [timestamp, message]
                    ]
                }
            ]
        }
        
        try:
            response = requests.post(LOKI_URL, json=payload, timeout=5)
            
            if response.status_code == 204:
                # 204 No Content - —É—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Loki
                print(f"[{datetime.now().strftime('%H:%M:%S')}] [{level:8}] {message}")
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Loki: {response.status_code} - {response.text}")
                
        except requests.exceptions.ConnectionError:
            print(f"‚úó –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Loki. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        except requests.exceptions.Timeout:
            print(f"‚úó –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Loki")
        except Exception as e:
            print(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def run_continuous_simulation(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±—ç–∫–µ–Ω–¥–∞"""
        self.is_running = True
        
        print("\n" + "="*70)
        print("üöÄ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω")
        print("="*70)
        print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤: {LOKI_URL}")
        print(f"üìä –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {APP_NAME}")
        print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*70 + "\n")
        
        # –î–∞–µ–º Docker –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞—Ä—Ç
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Loki (5 —Å–µ–∫—É–Ω–¥)...\n")
        time.sleep(5)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        self.send_log_to_loki(
            "üéâ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –±—ç–∫–µ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", 
            "system", 
            "INFO"
        )
        
        iteration = 0
        
        while self.is_running:
            try:
                iteration += 1
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –≤–µ—Å–∞–º–∏
                activity_type = random.choices(
                    ['trading', 'user-activity', 'system', 'validation'],
                    weights=[0.5, 0.25, 0.15, 0.1],  # –ë–æ–ª—å—à–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    k=1
                )[0]
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                if activity_type == 'trading':
                    self.simulate_trading_activity()
                elif activity_type == 'user-activity':
                    self.simulate_user_activity()
                elif activity_type == 'system':
                    self.simulate_system_events()
                elif activity_type == 'validation':
                    self.simulate_validation_events()
                
                # –ö–∞–∂–¥—ã–µ 20 –∏—Ç–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if iteration % 20 == 0:
                    print(f"\nüìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–≥–æ–≤: {iteration}\n")
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ (1-5 —Å–µ–∫—É–Ω–¥)
                delay = random.uniform(1, 5)
                time.sleep(delay)
                
            except KeyboardInterrupt:
                print("\n\n‚èπ  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                self.is_running = False
                break
            except Exception as e:
                error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}"
                self.send_log_to_loki(error_msg, "system", "CRITICAL")
                print(f"\n‚ùå {error_msg}")
                time.sleep(5)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        self.send_log_to_loki(
            "üëã –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –±—ç–∫–µ–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
            "system", 
            "INFO"
        )
        
        print("\n" + "="*70)
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print("="*70 + "\n")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    backend = CryptoBackend()
    backend.run_continuous_simulation()


if __name__ == "__main__":
    main()


